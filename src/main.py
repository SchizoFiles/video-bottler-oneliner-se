import subprocess, os, json, sys
[subprocess.run(["ffmpeg", "-y", "-i", (file := sys.argv[1]), "-b:v", str(targetVideoBitrate if (targetVideoBitrate := ((5.2 * 8 * 1024 * 1024) / ((1000 * (videoLength := float(subprocess.run(["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", file], stdout = subprocess.PIPE, stderr = subprocess.STDOUT).stdout)))  - ((audioBitrate := float(audioBitrateFfprobe)/1000 if not b"N/A" in (audioBitrateFfprobe := (subprocess.run(["ffprobe", "-v", "error", "-select_streams", "a:0", "-show_entries", "stream=bit_rate", "-of", "compact=p=0:nk=1", file], stdout = subprocess.PIPE, stderr = subprocess.STDOUT).stdout)) else (audioBitDepth if not b"N/A" in (audioBitDepth := (subprocess.run(["ffprobe", "-v", "error", "-select_streams", "a:0", "-show_entries", "stream=bits_per_raw_sample", "-of", "compact=p=0:nk=1", file], stdout = subprocess.PIPE, stderr = subprocess.STDOUT).stdout)) else (float(mediaInfoOut["media"]["track"][2]["BitDepth"]) if "BitDepth" in (mediaInfoOut := (mediaInfoOut := json.loads((subprocess.run(["MediaInfo", "--Output=JSON", file], stdout = subprocess.PIPE, stderr = subprocess.STDOUT).stdout))))["media"]["track"][2] else float(mediaInfoOut["media"]["track"][2]["BitRate"])/1000))))))) < (videoBitrate := (ffmpegVideoBitrate if not b"N/A" in (ffmpegVideoBitrate := (subprocess.run(["ffprobe", "-v", "quiet", "-select_streams", "v:0", "-show_entries", "stream=bit_rate", "-of", "default=noprint_wrappers=1:nokey=1", file], stdout = subprocess.PIPE, stderr = subprocess.STDOUT).stdout))else (float(mediaInfoOut["media"]["track"][0]["OverallBitRate"])- (audioBitrate*1000))/1000)) else videoBitrate)+"k", "-c:v",  (videoEncoder := "libvpx-vp9"), "-maxrate", f"{targetVideoBitrate}k", "-bufsize", f"{targetVideoBitrate/2}k", "-minrate", "0k", "-vf", f"scale="+str(outVideoWidth if (outVideoWidth if (outVideoWidth:=((targetVideoBitrate/100)*145)) > 280 else 280) < (videoWidth := (float(subprocess.run(["ffprobe", "-v", "error", "-select_streams", "v:0", "-show_entries", "stream=width", "-of", "csv=s=x:p=0", file], stdout = subprocess.PIPE, stderr = subprocess.STDOUT).stdout))) else videoWidth)+":"+str(outVideoHeight := (outVideoWidth/(outVideoWidth/(videoHeight:=float(subprocess.run(["ffprobe", "-v", "error", "-select_streams", "v:0", "-show_entries", "stream=height", "-of", "csv=s=x:p=0", file], stdout = subprocess.PIPE, stderr = subprocess.STDOUT).stdout))))), "-deadline", "good", "-auto-alt-ref", "1", "-lag-in-frames", "12", "-threads", "8", "-row-mt", "1", "-pass", "1", "-an", "-f", "null", "NUL"]), subprocess.run(["ffmpeg", "-y", "-i", file, "-b:v", f"{targetVideoBitrate}k","-c:v", videoEncoder, "-maxrate", f"{targetVideoBitrate}k","-bufsize", f"{targetVideoBitrate/2}k", "-minrate", "0k", "-vf", f"scale={outVideoWidth}:{outVideoHeight}", "-deadline", "good", "-auto-alt-ref", "1", "-lag-in-frames", "12", "-threads", "8", "-row-mt", "1","-map_metadata", "0", "-metadata:s:v:0", f"bit_rate={targetVideoBitrate}","-pass", "2", "-c:a", audioCodec := "libopus", "-frame_duration", "20","-b:a", f"{audioBitrate}k",f"{os.path.splitext(file)[0]}1.webm"])]